openapi: 3.0.1
info:
  title: Polis
  termsOfService: https://pol.is/tos
  contact:
    name: The Computational Democracy Project
    email: hello@compdemocracy.org
    url: https://compdemocracy.org/
  license:
    name: AGPL 3.0
    url: https://github.com/compdemocracy/polis/blob/dev/LICENSE
  version: "4.0.0"
  description: |
    **This is a proposed Polis API.**

    A fuller description will be added later.
externalDocs:
  description: Find out more about OpenAPI
  url: http://swagger.io
servers:
  - url: /api/v4
paths:
  /comments:
    get:
      tags:
      - comment
      summary: List comments
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc interdum tristique neque, id sollicitudin tortor sollicitudin vitae.
      operationId: getComments
      parameters:
      - name: conversation_id
        in: query
        description: Alphnumeric ID for conversation
        required: true
        example: 2demo
        schema:
          type: string
          pattern: "^[0-9][a-z0-9]+$"
      - name: moderation
        in: query
        description: Whether fetching comments as moderator with additional fields
        required: false
        schema:
          type: boolean
      - name: include_voting_patterns
        in: query
        description: Whether to include voting pattern fields in additional fields (To have effect, requires `moderation` to be `true`)
        schema:
          type: boolean
          default: false
      - name: include_social
        in: query
        schema:
          type: boolean
      - name: mod
        in: query
        description: When supplied, filters for comments with a specific `mod` value
        required: false
        schema:
          type: integer
          enum: [-1, 0, 1]
      - name: mod_gt
        in: query
        description: When supplied, filters for `mod` greater than this value
        required: false
        schema:
          type: integer
          enum: [-1, 0]
      - name: report_id
        in: query
        schema:
          type: string
          pattern: "^r?[0-9][a-zA-Z0-9]+$"
      responses:
        200:
          description: An array of comment objects
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/ArrayOfCommentModVoting'
                - $ref: '#/components/schemas/ArrayOfCommentMod'
                - $ref: '#/components/schemas/ArrayOfComment'
        400:
          description: Bad request
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ApiError'
      security: []
components:
  schemas:
    Comment:
      required:
      - txt
      - tid
      type: object
      properties:
        txt:
          type: string
          description: Body text of the comment
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit
        tid:
          type: integer
          description: Numeric ID of comment
          minimum: 0
          example: 12
        created:
          type: integer
          description: Unix timestamp of comment creation
          format: int64
          example: 1403054214174
        is_seed:
          type: boolean
          description: Whether comment is a seed comment from moderator
          example: true
        is_meta:
          type: boolean
          description: Whether comment has been marked as metadata by moderator
          example: false
        lang:
          type: string
          description: Language of submitted comment
          pattern: "^[a-z]{2}$"
          example: en
        pid:
          type: integer
          description: Conversation-specific numeric ID of participant
          minimum: 0
          example: 0
    CommentMod:
      allOf:
      - $ref: '#/components/schemas/Comment'
      - type: object
        properties:
          velocity:
            type: number
            default: 1
          mod:
            type: integer
            description: "Moderation status of comment: moderated _out_ (-1), _not yet_ moderated (0), or moderated _in_ (1)."
            enum: [-1, 0, 1]
            default: 0
          active:
            type: boolean
          conversation_id:
            type: string
            example: 2demo
    CommentModVoting:
      allOf:
      - $ref: '#/components/schemas/CommentMod'
      - type: object
        properties:
          agree_count:
            type: integer
            minimum: 0
            example: 75
          disagree_count:
            type: integer
            minimum: 0
            example: 29
          pass_count:
            type: integer
            minimum: 0
            example: 37
          count:
            type: integer
            minimum: 0
            example: 141
    ArrayOfComment:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    ArrayOfCommentMod:
      type: array
      items:
        $ref: '#/components/schemas/CommentMod'
    ArrayOfCommentModVoting:
      type: array
      items:
        $ref: '#/components/schemas/CommentModVoting'
    ApiError:
      type: string
      example: polis_err_param_parse_failed_conversation_id
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
