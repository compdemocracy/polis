# first build or re-build:
# docker-compose build --build-arg GIT_HASH $(git rev-parse --short HEAD) --parallel
# full re-build with no cache from previous buils:
# docker-compose build --build-arg GIT_HASH $(git rev-parse --short HEAD) --parallel --no-cache
# otherwise:
# docker-compose up --detach
# to stop:
# docker-compose down

version: "3.1"

services:
  server:
    container_name: polis-server
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./server/docker-dev.env
    depends_on:
      - "postgres"
      - "file-server"
    networks:
      - "polis-dev"
    ports:
      - "5000:5000"

  math:
    container_name: polis-math
    depends_on:
      - "postgres"
    build:
      context: ./math
    env_file: ./math/docker-dev.env
    networks:
      - "polis-dev"

  postgres:
    container_name: polis-postgres
    restart: always
    env_file: ./server/docker-db-dev.env
    build:
      context: ./server
      dockerfile: Dockerfile-db
    networks:
      - "polis-dev"
    volumes:
      - "backups:/backups"
      - "postgres:/var/lib/postgresql/data"

  nginx-proxy:
    container_name: polis-nginx-proxy
    build:
      context: ./file-server
      dockerfile: nginx.Dockerfile
    depends_on:
      - "server"
    networks:
      - "polis-dev"
    ports:
      - "80:80"

  file-server:
    container_name: polis-file-server
    build:
      context: ./file-server
      dockerfile: Dockerfile
    depends_on:
      - "client-participation"
      - "client-admin"
      - "client-report"
    networks:
      - "polis-dev"
    ports:
      - "8080:8080"

  client-participation:
    container_name: polis-client-participation
    image: polis/client-participation
    build:
      context: ./client-participation

  client-admin:
    container_name: polis-client-admin
    image: polis/client-admin
    build:
      context: ./client-admin

  client-report:
    container_name: polis-client-report
    image: polis/client-report
    build:
      context: ./client-report

networks:
  polis-dev:

volumes:
  backups:
  postgres:
