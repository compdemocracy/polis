# Before running docker compose --profile postgres up for the first time,
# first copy the env.example file to .env and fill in the values.
# `cp env.example .env`
# (edit values as needed)
#
# Then, build and run with:
# `docker compose --profile postgres build`
# `docker compose --profile postgres up`
#
# Subsequently you should only need to run:
# `docker compose --profile postgres up`
#
# Force a full re-build with no cache from previous builds:
# `docker compose --profile postgres build --no-cache`
# `docker compose --profile postgres up`
#
# If you only changed the .env file, you can do a quick rebuild:
# `docker compose --profile postgres up --force-recreate`
#
# To stop, press CTRL+C (if not running in --detach mode), or run:
# `docker compose --profile postgres down`
#
# omit the --profile postgres flag to run without the postgres service,
# such as when using postgres on your host machine, or a remote server.
# (by default, the Makefile will include --profile postgres, unless POSTGRES_DOCKER=false in your env)

services:
  server:
    env_file:
      - ${SERVER_ENV_FILE:-.env}
    image: docker.io/compdem/polis-server:${TAG:-dev}
    build:
      context: ./server
      dockerfile: Dockerfile
      target: prod
      args:
        NODE_ENV: production
      labels:
        polis_tag: ${TAG:-dev}
    depends_on:
      - "file-server"
    networks:
      - "polis-net"
    # Scale the server container to a given number of instances.
    scale: 1
    volumes:
      # Persist logs to a volume, so they can be accessed after the container is stopped.
      - server-logs:/app/logs

  math:
    image: docker.io/compdem/polis-math:${TAG:-dev}
    build:
      context: ./math
      labels:
        polis_tag: ${TAG:-dev}
    environment:
      - DATABASE_URL=${DATABASE_URL:?error}
      - MATH_ENV=${MATH_ENV:-prod}
      - WEBSERVER_USERNAME=${WEBSERVER_USERNAME:?error}
      - WEBSERVER_PASS=${WEBSERVER_PASS:?error}
    networks:
      - "polis-net"

  postgres:
    image: docker.io/compdem/polis-postgres:${TAG:-dev}
    restart: always
    build:
      context: ./server
      dockerfile: Dockerfile-db
      labels:
        polis_tag: ${TAG:-dev}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?error}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?error}
      - POSTGRES_USER=${POSTGRES_USER:?error}
    networks:
      - "polis-net"
    volumes:
      - "backups:/backups"
      - "postgres:/var/lib/postgresql/data"
    profiles:
      - postgres

  nginx-proxy:
    image: docker.io/compdem/polis-nginx-proxy:${TAG:-dev}
    build:
      context: ./file-server
      dockerfile: nginx.Dockerfile
      labels:
        polis_tag: ${TAG:-dev}
    depends_on:
      - "server"
    networks:
      - "polis-net"
    ports:
      - ${HTTP_PORT:-80}:80
      - ${HTTPS_PORT:-443}:443

  file-server:
    image: docker.io/compdem/polis-file-server:${TAG:-dev}
    build:
      context: ./
      dockerfile: file-server/Dockerfile
      labels:
        polis_tag: ${TAG:-dev}
      args:
        EMBED_SERVICE_HOSTNAME: ${EMBED_SERVICE_HOSTNAME}
        ENABLE_TWITTER_WIDGETS: ${ENABLE_TWITTER_WIDGETS:-false}
        FB_APP_ID: ${FB_APP_ID}
        GA_TRACKING_ID: ${GA_TRACKING_ID}
        GIT_HASH: "${GIT_HASH:-placeholder}"
        NODE_ENV: production
        SERVICE_URL: ${SERVICE_URL}
    environment:
      - PORT=${STATIC_FILES_PORT:-8080}
    networks:
      - "polis-net"

networks:
  polis-net:

volumes:
  backups:
    labels:
      polis_tag: ${TAG:-dev}
  postgres:
    labels:
      polis_tag: ${TAG:-dev}
  server-logs:
    labels:
      polis_tag: ${TAG:-dev}
